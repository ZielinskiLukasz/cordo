#!/usr/bin/env php
<?php

use Bernard\Consumer;
use Bernard\Router\ClassNameRouter;
use Bernard\Router\ContainerReceiverResolver;
use Symfony\Component\EventDispatcher\EventDispatcher;
use App\Users\Application\Command\SendUserWelcomeMessage;
use App\Users\Application\Command\Handler\SendUserWelcomeMessageHandler;

require __DIR__.'/bootstrap/autoload.php';

$isConsole = true;

// bootstapping
$container      = require __DIR__.'/bootstrap/app.php';
$queueFactory   = require __DIR__.'/bootstrap/queue_factory.php';

$router = new ClassNameRouter([
    SendUserWelcomeMessage::class => SendUserWelcomeMessageHandler::class,
], new ContainerReceiverResolver($container));

$eventDispatcher = new EventDispatcher();

$eventDispatcher->addListener(
    Bernard\BernardEvents::INVOKE,
    function (Bernard\Event\EnvelopeEvent $envelopeEvent) {
        echo PHP_EOL . 'Processing: ' . $envelopeEvent->getEnvelope()->getClass();
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::ACKNOWLEDGE,
    function (Bernard\Event\EnvelopeEvent $envelopeEvent) {
        echo PHP_EOL . 'Processed: ' . $envelopeEvent->getEnvelope()->getClass();
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::REJECT,
    function (Bernard\Event\RejectEnvelopeEvent $envelopeEvent) use ($container) {
        echo PHP_EOL . 'Failed: ' . $envelopeEvent->getEnvelope()->getMessage();
        try {
            throw new Exception($envelopeEvent->getEnvelope()->getMessage());
        } catch (Exception $e) {
            $container->get('error_reporter')->report($e);
        }

    }
);

$consumer = new Consumer($router, $eventDispatcher);
$consumer->consume($queueFactory->create('default'));
